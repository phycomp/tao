<script>
/*var scrollPos;
window.onscroll=function(){ONSCROLL();}
var nav=document.querySelector('nav');
var navHeight=nav.offsetHeight;
var header=document.querySelector('header');
scrollPos=window.pageYOffset;
nav.style=scrollPos?'position:fixed':'';
if (~scrollPos)
	{ var wrapper=document.createElement('div')
	nav.parentNode.insertBefore(wrapper, nav);
	wrapper.appendChild(nav);
	}
//else
function ONSCROLL(){
}*/
</script>
'''
		pass
	def process_request(self, request):
		print(request)
	def process_response(self, request, response):
		if hasattr(response, 'post'):
			print( response.post.author==request.user)
			#return response.post.author==request.user
			return responseauthor==me)
			if author!=me: return SimpleTemplateResponse('permission-not-granted.html')	#HttpResponse()
			else: return response
		response(content_type)
		response=HttpResponse(content_type='image/png')
		if hasattr(context_data, 'forum'):
			print(context_data.forum.post.author==request.user)
			print('response', response)
'''
		pass
	def process_request(self, request):
		print(request)
	def process_response(self, request, response):
		if hasattr(response, 'post'):
			print( response.post.author==request.user)
			#return response.post.author==request.user
			return responseauthor==me)
			if author!=me: return SimpleTemplateResponse('permission-not-granted.html')	#HttpResponse()
			else: return response
		response(content_type)
		response=HttpResponse(content_type='image/png')
		if hasattr(context_data, 'forum'):
			print(context_data.forum.post.author==request.user)
			print('response', response)
'''
	def process_request(self, request):
		print(request)
	def process_response(self, request, response):
		if hasattr(response, 'post'):
			print( response.post.author==request.user)
			#return response.post.author==request.user
			return response

class SimpleMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response
        # One-time configuration and initialization.

    def __call__(self, request):
        # Code to be executed for each request before
        # the view (and later middleware) are called.

        response = self.get_response(request)
        return response

        # Code to be executed for each request/response after
        # the view is called.


class MiddlewareMixin(object):
    def __init__(self, get_response=None):
        self.get_response = get_response
        super(MiddlewareMixin, self).__init__()
    def __call__(self, request):
        response = None
        if hasattr(self, 'process_request'):
            response = self.process_request(request)
        if not response:
            response = self.get_response(request)
        if hasattr(self, 'process_response'):
            response = self.process_response(request, response)
        return response

作者：llicety
链接：https://www.jianshu.com/p/4cc8935ebe0b
來源：简书
简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。
    """
    Middleware that requires a user to be authenticated to view any page other
    than LOGIN_URL. Exemptions to this requirement can optionally be specified
    in settings via a list of regular expressions in LOGIN_EXEMPT_URLS (which
    you can copy from your urls.py).

    Requires authentication middleware and template context processors to be
    loaded. You'll get an error if they aren't.
    """
        assert hasattr(request, 'user'), "The Login Required middleware requires authentication middleware to be installed. Edit your MIDDLEWARE_CLASSES setting to insert 'django.contrib.auth.middlware.AuthenticationMiddleware'. If that doesn't work, ensure your TEMPLATE_CONTEXT_PROCESSORS setting includes 'django.core.context_processors.auth'."
from django.http import HttpResponseRedirect
from django.urls import reverse

from django.utils.deprecation import MiddlewareMixin

class LoginRequiredMiddleware(MiddlewareMixin):
	def __init__(self, get_response):
		self.get_response=get_response
	def __call__(self, request):
		self.response=self.get_response(request)
		#if not hasattr(request, 'user'): HttpResponseRedirect('login')
		#assert hasattr(request, 'user'), 'LoginRequiredMiddleware'
	def process_response(self, request, response):
		if not hasattr(request, 'user'):
			path=request.path.lstrip('/')
			if not path or not any(path != eu for eu in ['login', 'admin']):
				HttpResponseRedirect(reverse('login'))
'''
